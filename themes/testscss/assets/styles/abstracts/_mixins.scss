@use 'sass:math';
@use 'sass:string';
@use 'sass:map';
@use 'sass:meta';
@use 'vars' as *;

@mixin xs {
    @media screen and (min-width: map.get($breakpoints, 'xs')) {
        @content;
    }
}

@mixin sm {
    @media screen and (min-width: map.get($breakpoints, 'sm')) {
        @content;
    }
}

@mixin md {
    @media screen and (min-width: map.get($breakpoints, 'md')) {
        @content;
    }
}

@mixin lg {
    @media screen and (min-width: map.get($breakpoints, 'lg')) {
        @content;
    }
}

@mixin xl {
    @media screen and (min-width: map.get($breakpoints, 'xl')) {
        @content;
    }
}

@mixin xxl {
    @media screen and (min-width: map.get($breakpoints, 'xxl')) {
        @content;
    }
}

@mixin defaultContainer {
    @media screen and (min-width: map.get($breakpoints, 'defaultContainer')) {
        @content;
    }
}

@mixin full-hd {
    @media screen and (min-width: 1921px) {
        @content;
    }
}

@mixin full-2k {
    @media screen and (min-width: 2560px) {
        @content;
    }
}
//3072x1620
@mixin full-3k {
    @media screen and (min-width: 3072px) {
        @content;
    }
}
//3840x2160
@mixin full-4k {
    @media screen and (min-width: 3840px) {
        @content;
    }
}

@mixin mobile {
    @media screen and (max-width: map.get($breakpoints, 'md')-1) {
        @content;
    }
}

@mixin hamburger {
    @media screen and (max-width: map.get($breakpoints, 'lg')-1) {
        @content;
    }
}

@mixin xs-max {
    @media screen and (max-width: map.get($breakpoints, 'xs')-1) {
        @content;
    }
}

@mixin sm-max {
    @media screen and (max-width: map.get($breakpoints, 'sm')-1) {
        @content;
    }
}

/**
 * Media query mixin with optional max width.
 *
 * Usage:
 *
 * @include breakpoint(768) -> min-width: 768px
 * @include breakpoint(768, 1024) -> min-width: 768px and max-width: 1024px
 *
 * or
 *
 * @include breakpoint(md) -> min-width: 768px
 * @include breakpoint(md, lg) -> min-width: 768px and max-width: 1024px
 */
@mixin breakpoint($min, $max: null) {
    $min: if(meta.type-of($min) == 'string', map.get($breakpoints, $min), $min + 'px');

    @if ($max != null) {
        $max: if(meta.type-of($max) == 'string', map.get($breakpoints, $max), $max + 'px');

        @media screen and (min-width: #{$min}) and (max-width: #{$max}) {
            @content;
        }
    } @else {
        @media screen and (min-width: #{$min}) {
            @content;
        }
    }
}

/**
 * Media query mixin for max-width.

 * Usage:
 *
 * @include breakpoint-max(768) -> max-width: 768px
 *
 * or
 *
 * @include breakpoint-max(md) -> max-width: 768px
 */
@mixin breakpoint-max($max) {
    $max: if(meta.type-of($max) == 'string', map.get($breakpoints, $max), $max + 'px');

    @media screen and (max-width: #{$max}) {
        @content;
    }
}

/**
 * Limit text to maximum number of lines.
 */
@mixin max-lines($lines: 2) {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    @supports (-webkit-line-clamp: $lines) {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: initial;
        display: -webkit-box;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
        word-break: break-word;
    }
}

@mixin aspect-ratio($w, $h, $important: false) {
    @if ($important) {
        position: relative !important;
        padding-bottom: calc(#{$h} / #{$w} * 100%) !important;
        > * {
            position: absolute !important;
            width: 100% !important;
            height: 100% !important;
            top: 0 !important;
            left: 0 !important;
            right: 0 !important;
            bottom: 0 !important;
        }
    } @else {
        position: relative;
        padding-bottom: calc(#{$h} / #{$w} * 100%);
        > * {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }
    }
}

@mixin container($type: 'default') {
    width: 100%;
    padding-left: 16px;
    padding-right: 16px;
    margin-left: auto;
    margin-right: auto;
    @if ($type == 'default') {
        max-width: var(--container);
    } @else {
        max-width: var(--container-#{$type});
    }
}

@mixin transition($duration: '200ms', $easing: 'cubic-bezier(0.4, 0, 0.2, 1)', $property: 'color, background, border-color, fill, stroke, opacity, box-shadow, transform, filter') {
    -webkit-transition-property: #{$property};
    -webkit-transition-duration: #{$duration};
    -webkit-transition-timing-function: #{$easing};
    transition-property: #{$property};
    transition-duration: #{$duration};
    transition-timing-function: #{$easing};
}

@mixin transition-all($duration: '200ms', $easing: 'cubic-bezier(0.4, 0, 0.2, 1)') {
    @include transition($duration, $easing, all);
}

@mixin sr-only($enable: true) {
    @if ($enable) {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    } @else {
        position: static;
        width: auto;
        height: auto;
        padding: 0;
        margin: 0;
        overflow: visible;
        clip: auto;
        white-space: normal;
    }
}

@mixin circle($size) {
    width: $size;
    height: $size;
    border-radius: 50%;
}